e3a02008  // MOV R2, #8          ; Inicializar R2 con 8
e3a03006  // MOV R3, #6          ; Inicializar R3 con 6
e00b2003  // MLA R2, R3, R3, R0  ; R2 = (R3 * R3) + R0
e5822000  // STR R2, [R2, #0]    ; Guardar resultado MLA en memoria
e1020093  // SDIV R2, R3, R3     ; R2 = R3 / R3
e5822004  // STR R2, [R2, #4]    ; Guardar resultado SDIV en memoria
e1f00923  // UDIV R2, R3, R3     ; R2 = R3 / R3 (sin signo)
e5822008  // STR R2, [R2, #8]    ; Guardar resultado UDIV en memoria
e1a02092  // MOV R2, R2, LSL #1  ; R2 = R2 << 1
e582200c  // STR R2, [R2, #12]   ; Guardar resultado LSL en memoria
e1a02392  // MOV R2, R2, LSR #1  ; R2 = R2 >> 1
e5822010  // STR R2, [R2, #16]   ; Guardar resultado LSR en memoria
e1a02692  // MOV R2, R2, ASR #1  ; R2 = R2 >>> 1
e5822014  // STR R2, [R2, #20]   ; Guardar resultado ASR en memoria
e1a02992  // MOV R2, R2, ROR #1  ; R2 = ROR(R2, 1)
e5822018  // STR R2, [R2, #24]   ; Guardar resultado ROR en memoria
